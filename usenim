#!/usr/bin/env bash

# Copyright (C) 2024 Zack Guard
# Licensed under GNU General Public License version 3 or later; see LICENSE

set -eo pipefail
shopt -s nullglob

declare -r PREV_FILENAME=prev
declare -r CUR_FILENAME=current
HAS_CMDLINE=''

if [ -z "$NIM_DIR" ]; then
    if [ -z "$XDG_DATA_HOME" ]; then
        NIM_DIR="$HOME/.local/share/usenim"
    else
        NIM_DIR="$XDG_DATA_HOME/usenim"
    fi
fi

# helper functions

# print to stderr in red
echo_err () {
    tput setaf 1 >&2
    echo -n "$@" >&2
    tput sgr0 >&2
    echo '' >&2
}

require_var () {
    if [ -z "$1" ]; then
        echo_err "No $2 given."
        exit 1
    fi
}

expect_arg_count () {
    if [ "$2" -lt "$1" ]; then
        echo_err "Too few arguments."
        exit 1
    elif [ "$2" -gt "$1" ]; then
        echo_err "Too many arguments."
        exit 1
    fi
}

# list local versions
print_available () {
    echo 'Installed versions:' >&2
    local ALL_VERS; ALL_VERS=$(printf '%s\n' nim-* | sort -V)
    local CUR_VER; CUR_VER=$(readlink "$CUR_FILENAME" || echo '')
    for f in $ALL_VERS; do
        if [ -d "$f" ]; then
            if [[ "$f" == "$CUR_VER" ]]; then
                echo -n '* ' >&2
                tput setaf 2 >&2
            else
                echo -n '  ' >&2
            fi
            echo -n "${f//nim-/}" >&2
            tput sgr0 >&2
            LINK_DEST=$(readlink "$f" || true)
            if [ -n "$LINK_DEST" ]; then
                tput dim >&2
                echo -n ' -> ' >&2
                tput sgr0 >&2
                echo -n "$LINK_DEST" >&2
            fi
            echo '' >&2
        fi
    done
}

# clone and install a given version
install_version () {
    GIT_URL='https://github.com/nim-lang/Nim'
    if [[ "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        # e.g. 2.0.10
        set -x
        git clone "$GIT_URL" --depth 1 --branch v"$1" nim-"$1"
        pushd nim-"$1"
    elif [[ "$1" =~ ^#[0-9A-Za-z]+$ ]]; then
        # e.g. #15271dba2f4772a193f027d36c05b838dfff5bd4
        set -x
        git clone "$GIT_URL" nim-"$1"
        pushd nim-"$1"
        git checkout "${1:1}" # omit leading '#'
    else
        # arbitrary branch/tag
        set -x
        git clone "$GIT_URL" --depth 1 --branch "$1" nim-"$1"
        pushd nim-"$1"
    fi
    ./build_all.sh
    # delete unneeded stuff to save space
    rm -rf nimcache/ csources*/
    find . -name .git -exec rm -rf {} +
    rm -v compiler/nim{1,2} || true
    popd

    { set +x; } 2> /dev/null
}

dir_symlink () {
    ln -sTf "$1" "$2"
}

# use a locally installed version
use_version () {
    if [ -n "$HAS_CMDLINE" ]; then
        # command given via -x, temporarily set PATH and run command
        REALPATH=$(realpath "$1")
        cd "$ORIG_CWD"
        export PATH="$REALPATH/bin:$PATH"
        "${CMDLINE[@]}"
        exit "$?"
    else
        # update symlink
        if [ -h "$CUR_FILENAME" ]; then
            PREV_TARGET=$(readlink "$CUR_FILENAME")
            if [ "$PREV_TARGET" != "$1" ]; then
                dir_symlink "$PREV_TARGET" "$PREV_FILENAME"
            fi
        fi
        dir_symlink "$1" "$CUR_FILENAME"
        nim --version
    fi
}

prepare_cmdline () {
    case "$1" in
        -x)
            shift || true
            if [ "$#" -lt 1 ]; then
                echo_err 'No command specified.'
                exit 1
            fi
            HAS_CMDLINE=1
            CMDLINE=("$@")
            ;;
        '')
            # no command, ok
            ;;
        *)
            echo_err 'Unexpected argument.'
            exit 1
            ;;
    esac
}

# main

ORIG_CWD=$(pwd)
mkdir -pv "$NIM_DIR"
cd "$NIM_DIR"

case "$1" in
    --stable)
        # ask Nim server for the latest stable version
        shift || true
        prepare_cmdline "$@"
        declare -r URL='https://nim-lang.org/channels/stable'
        echo "Querying latest stable version from $URL..." >&2
        VER=$(curl -sS "$URL")
        ;;
    --link | -l)
        # symlink an existing directory
        require_var "$2" version
        require_var "$3" directory
        expect_arg_count 3 "$#"
        VER="$2"
        pushd "$ORIG_CWD" > /dev/null
        DIR=$(realpath "$3")
        popd > /dev/null
        if [ -x "$DIR"/bin/nim ]; then
            dir_symlink "$DIR" nim-"$VER"
            print_available
            exit
        else
            echo_err "$DIR does not contain a Nim installation."
            exit 1
        fi
        ;;
    --remove | -r)
        # remove an existing version or link
        shift || true
        require_var "$1" version
        DID_DELETE=''
        while [ "$#" -gt 0 ]; do
            VER="$1"
            read -r -p "Remove version $VER? [y/N] " answer
            case "$answer" in
                [Yy]*)
                    DID_DELETE=1
                    rm -r nim-"$VER"
                    ;;
            esac
            shift || true
        done
        if [ -n "$DID_DELETE" ]; then
            print_available
            exit
        else
            exit 1
        fi
        ;;
    --which | -w)
        # print the real path of a file in the current version's bin
        shift || true
        require_var "$1" filename
        RET=0
        while [ "$#" -gt 0 ]; do
            FILE="$1"
            FILEPATH="$CUR_FILENAME/bin/$FILE"
            if [ -x "$FILEPATH" ]; then
                realpath "$FILEPATH"
            else
                echo_err "$FILE does not exist."
                RET=1
            fi
            shift || true
        done
        exit "$RET"
        ;;
    --help | -h)
        expect_arg_count 1 "$#"
        cat << EOD >&2
Usage:

  usenim
  usenim (<version> | - | --stable) [-x <cmdline>...]
  usenim (-l | --link) <version> <directory>
  usenim (-r | --remove) <version>...
  usenim (-w | --which) <filename>...
  usenim (-h | --help)

Examples:

  List installed versions:
  $ usenim

  Use a specific version:
  $ usenim 2.2.0

  Go back to the previous version:
  $ usenim -

  Query and use the latest stable version:
  $ usenim --stable

  Run a command using a specific version:
  $ usenim 2.2.0 -x bash

  Link an existing directory:
  $ usenim -l devel ~/programming/Nim

  Remove a version:
  $ usenim -r 1.6.20

  Show the real path of an executable in the current version:
  $ usenim --which nimsuggest
EOD
        exit 1
        ;;
    -)
        VER="$1"
        shift || true
        prepare_cmdline "$@"
        ;;
    -*)
        echo_err "Unknown option '$1'."
        exit 1
        ;;
    '')
        # list local versions and quit
        print_available
        exit
        ;;
    *)
        # version specified
        VER="$1"
        shift || true
        prepare_cmdline "$@"
        ;;
esac

set -u

# look for matching local version
FOUND_TARGET=''
if [ "$VER" = - ]; then
    if ! [ -h "$PREV_FILENAME" ]; then
        echo_err 'There is no previous version to use.'
        exit 1
    fi
    FOUND_TARGET=$(readlink "$PREV_FILENAME")
else
    if [[ "$VER" =~ ^([0-9]+\.){0,1}[0-9]+$ ]]; then
        # incomplete version number
        MATCHING_VERS=$(printf '%s\n' nim-"$VER".* | sort -V)
    elif [[ "$VER" =~ ^([0-9]+\.){2}[0-9]+$ ]]; then
        # complete version number
        MATCHING_VERS=$(printf '%s\n' nim-"$VER" | sort -V)
    else
        # something else
        MATCHING_VERS=$(printf '%s\n' nim-"$VER"* | sort -V)
    fi
    for f in $MATCHING_VERS; do
        if [ -d "$f" ]; then
            FOUND_TARGET="$f"
        fi
    done
fi
if [ -n "$FOUND_TARGET" ]; then
    # version found, symlink it
    use_version "$FOUND_TARGET"
else
    # version not found
    echo_err "Version $VER is not installed."
    print_available

    # ask if the user wants to install it
    read -r -p 'Do you want to clone and install it? [y/N] ' answer
    case "$answer" in
        [Yy]*)
            install_version "$VER"
            use_version nim-"$VER"
            ;;
        *)
            exit 1
            ;;
    esac
fi
